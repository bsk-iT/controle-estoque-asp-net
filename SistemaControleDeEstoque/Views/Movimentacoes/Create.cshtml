@model SistemaControleDeEstoque.Models.Movimentacao

@{
    ViewData["Title"] = "Nova Movimentação";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var estoqueProdutos = ViewData["EstoqueProdutos"] as Dictionary<int, int>;
}

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Cabeçalho -->
    <div class="bg-gradient-to-r from-slate-700 to-slate-900 px-6 py-4 rounded-t-lg shadow-md">
        <div class="flex items-center">
            <svg class="h-8 w-8 text-slate-100" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4" />
            </svg>
            <h1 class="ml-3 text-2xl font-bold text-slate-100">Registrar Movimentação</h1>
        </div>
    </div>

    <!-- Conteúdo do formulário -->
    <div class="bg-white shadow-lg rounded-b-lg p-8">
        <div class="max-w-2xl mx-auto">
            <form asp-action="Create" method="post" class="space-y-6">
                <!-- Validação -->
                <div asp-validation-summary="ModelOnly" class="text-sm text-red-600 p-2 bg-red-50 border border-red-200 rounded" role="alert"></div>

                <!-- Grid de campos -->
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <!-- Tipo -->
                    <div>
                        <label asp-for="Tipo" class="block text-sm font-medium text-gray-700 mb-1">Tipo</label>
                        <select asp-for="Tipo" id="tipoMovimentacao" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-slate-500 focus:border-slate-500">
                            <option value="">Selecione...</option>
                            <option value="Entrada">Entrada</option>
                            <option value="Saída">Saída</option>
                        </select>
                        <span asp-validation-for="Tipo" class="text-sm text-red-600"></span>
                    </div>

                    <!-- Quantidade -->
                    <div>
                        <label asp-for="Quantidade" class="block text-sm font-medium text-gray-700 mb-1">Quantidade</label>
                        <input asp-for="Quantidade" id="quantidade" type="number" min="1" step="1" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-slate-500 focus:border-slate-500" />
                        <span asp-validation-for="Quantidade" class="text-sm text-red-600"></span>
                        <div id="estoqueInfo" class="mt-1 text-sm text-slate-600 hidden">
                            Estoque disponível: <span id="estoqueDisponivel">0</span>
                        </div>
                    </div>

                    <!-- Data Movimentação -->
                    <div>
                        <label asp-for="DataMovimentacao" class="block text-sm font-medium text-gray-700 mb-1">Data da Movimentação</label>
                        <input asp-for="DataMovimentacao" type="datetime-local" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-slate-500 focus:border-slate-500" />
                        <span asp-validation-for="DataMovimentacao" class="text-sm text-red-600"></span>
                    </div>

                    <!-- Produto -->
                    <div>
                        <label asp-for="ProdutoId" class="block text-sm font-medium text-gray-700 mb-1">Produto</label>
                        <select asp-for="ProdutoId" id="produtoId" asp-items="ViewBag.ProdutoId" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-slate-500 focus:border-slate-500">
                            <option value="">Selecione um produto...</option>
                        </select>
                        <span asp-validation-for="ProdutoId" class="text-sm text-red-600"></span>
                    </div>

                    <!-- Usuário -->
                    <div class="md:col-span-2">
                        <label asp-for="UsuarioNome" class="block text-sm font-medium text-gray-700 mb-1">Responsável</label>
                        <div class="flex items-center px-3 py-2 border border-gray-300 rounded-md bg-slate-50">
                            <svg class="h-5 w-5 text-slate-600 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                            </svg>
                            <span class="text-sm text-gray-700">@Model.UsuarioNome</span>
                        </div>
                        <input asp-for="UsuarioId" type="hidden" />
                        <input asp-for="UsuarioNome" type="hidden" />
                    </div>
                </div>

                <!-- Botões -->
                <div class="flex justify-between pt-4">
                    <a asp-action="Index" class="inline-flex items-center px-4 py-2 border border-slate-300 text-sm font-medium rounded-md text-slate-800 bg-white hover:bg-slate-50">
                        <svg class="-ml-1 mr-2 h-5 w-5 text-slate-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                        </svg>
                        Voltar
                    </a>
                    <button type="submit" id="btnSubmit" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-slate-700 hover:bg-slate-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-slate-500">
                        <svg class="-ml-1 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                        </svg>
                        Registrar
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        // Armazenar informações de estoque
        const estoqueProdutos = @Html.Raw(Json.Serialize(estoqueProdutos));

        // Elementos do DOM
        const tipoSelect = document.getElementById('tipoMovimentacao');
        const produtoSelect = document.getElementById('produtoId');
        const quantidadeInput = document.getElementById('quantidade');
        const estoqueInfo = document.getElementById('estoqueInfo');
        const estoqueDisponivel = document.getElementById('estoqueDisponivel');
        const submitButton = document.getElementById('btnSubmit');

        // Função para verificar se a quantidade é válida
        function validarQuantidade() {
            // Só validamos para saídas
            if (tipoSelect.value !== 'Saída') {
                estoqueInfo.classList.add('hidden');
                return true;
            }

            // Verificar se um produto foi selecionado
            if (!produtoSelect.value) {
                estoqueInfo.classList.add('hidden');
                return true;
            }

            const produtoId = parseInt(produtoSelect.value);
            const quantidade = parseInt(quantidadeInput.value);
            const estoqueAtual = estoqueProdutos[produtoId] || 0;

            // Mostrar informação de estoque disponível
            estoqueInfo.classList.remove('hidden');
            estoqueDisponivel.textContent = estoqueAtual;

            // Para saídas, a quantidade não pode ser maior que o estoque
            if (quantidade > estoqueAtual) {
                quantidadeInput.setCustomValidity(`A quantidade não pode ser maior que o estoque disponível (${estoqueAtual})`);
                return false;
            } else {
                quantidadeInput.setCustomValidity('');
                return true;
            }
        }

        // Adicionar event listeners para validação em tempo real
        tipoSelect.addEventListener('change', validarQuantidade);
        produtoSelect.addEventListener('change', validarQuantidade);
        quantidadeInput.addEventListener('input', validarQuantidade);

        // Validar ao carregar a página
        document.addEventListener('DOMContentLoaded', validarQuantidade);

        // Validar antes de enviar o formulário
        document.querySelector('form').addEventListener('submit', function(e) {
            if (!validarQuantidade()) {
                e.preventDefault();
                alert('A quantidade não pode ser maior que o estoque disponível');
            }
        });
    </script>
}